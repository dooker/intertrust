{"version":3,"sources":["images/cloud.svg","images/solar.svg","config.js","panel.js","total-prodiuction.js","dashboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Config","endPoint","apiKey","resultsLimit","dataRefreshRate","weatherRefreshRate","rounding","fakeDataEndPoint","fakeDataKey","voltWattJSON","Panel","props","_useState","useState","title","id","voltage","wattage","solar","cloud","_useState2","Object","slicedToArray","state","setState","fetchFakeDataset","point","replace","Math","random","toFixed","onWattageChange","parseFloat","objectSpread","fetchFakeWeatherset","useEffect","loopDataFetch","setTimeout","loopWeatherFetch","react_default","a","createElement","className","src","alt","TotalProduction","power","Intl","NumberFormat","format","Dashboard","panels","panelsList","setPanelsList","_useState3","_useState4","totalWattage","setTotalWattage","newWattage","updateTotalWattage","value","request","require","options","method","url","qs","apikey","error","response","body","Error","statusText","result","JSON","parse","points","slice","i","length","push","panel","key","generatePanelsList","getPoints","total_prodiuction","App","dashboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b4a4070.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloud.e7c91752.svg\";","module.exports = __webpack_public_path__ + \"static/media/solar.d4e192b0.svg\";","const Config = {\r\n    endPoint: 'http://api.planetos.com/v1/datasets',\r\n    apiKey: '0e589dd9b7b348bcbbc8f6f2fb571e44',\r\n    resultsLimit: 30,\r\n    dataRefreshRate: 10*1000,\r\n    weatherRefreshRate: 5*60*1000,\r\n    rounding: 1,\r\n    fakeDataEndPoint: 'https://my.api.mockaroo.com/',\r\n    fakeDataKey: '?key=f9261860',\r\n    voltWattJSON: 'volt-watt.json'\r\n}\r\n\r\nexport default Config\r\n","import React, { useEffect, useState } from 'react';\r\nimport Config from './config';\r\nimport cloud from './images/cloud.svg';\r\nimport solar from './images/solar.svg';\r\n\r\nconst Panel = (props) => {\r\n    const [state, setState] = useState({\r\n        title: '',\r\n        id: null,\r\n        voltage: null,\r\n        wattage: null,\r\n        solar: null,\r\n        cloud: null\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchFakeDataset();\r\n        fetchFakeWeatherset();\r\n\r\n        loopDataFetch();\r\n        loopWeatherFetch();\r\n    }, [])\r\n\r\n    /**\r\n     * Get data (title, voltage, wattage) of panel in loop\r\n     */\r\n    function loopDataFetch() {\r\n        setTimeout(() => {\r\n            fetchFakeDataset();\r\n\r\n            // re-run\r\n            loopDataFetch();\r\n        }, Config.dataRefreshRate)\r\n    }\r\n\r\n    /**\r\n     * Get weather (solar power, cloud coverage) of panel in loop\r\n     */\r\n    function loopWeatherFetch() {\r\n        setTimeout(() => {\r\n            fetchFakeWeatherset();\r\n\r\n            // re-run\r\n            loopWeatherFetch();\r\n        }, Config.weatherRefreshRate)\r\n    }\r\n\r\n    /**\r\n     * Generate fake data. Ideally from API but hopefully random generation does too\r\n     */\r\n    function fetchFakeDataset() {\r\n        var title = props.point.replace(/_/g, ' ')\r\n        var voltage = (Math.random(380)*1000).toFixed(Config.rounding);\r\n        var wattage = (Math.random(50)*100000).toFixed(Config.rounding);\r\n\r\n        props.onWattageChange(parseFloat(wattage));\r\n        \r\n        setState(state => {\r\n            return { ...state, title: title, id: props.point, voltage: voltage, wattage: wattage };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generate fake weather. Ideally from API but hopefully random generation does too\r\n     */\r\n    function fetchFakeWeatherset() {\r\n        var solar = (Math.random(100)*10).toFixed(Config.rounding);\r\n        var cloud = (Math.random(100)*100).toFixed(0);\r\n\r\n        setState(state => {\r\n            return { ...state, solar: solar, cloud: cloud };\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"panel\">\r\n            <div className=\"panel-section identification\">\r\n                <div className=\"title\">{state.title}</div>\r\n                <div className=\"id\">{state.id}</div>\r\n            </div>\r\n            <div className=\"panel-section values\">\r\n                <div className=\"voltage\">{state.voltage} V</div>\r\n                <div className=\"wattage\">{state.wattage} kW</div>\r\n            </div>\r\n            <div className=\"panel-section weather\">\r\n                <div className=\"solar\">\r\n                    <img src={solar} alt=\"solar\" />\r\n                    <span>{state.solar}</span>\r\n                </div>\r\n                <div className=\"clouds\">\r\n                    <span>{state.cloud} %</span>\r\n                    <img src={cloud} alt=\"cloud\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Panel;\r\n","import React from 'react';\r\n\r\nconst TotalProduction = (props) => {\r\n    var nf = new Intl.NumberFormat();\r\n    var power = nf.format(props.power);\r\n\r\n    return (\r\n        <div className=\"total-production\">\r\n            Total production (kW): {power}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TotalProduction","import React, { useEffect, useState } from 'react';\r\nimport Config from './config';\r\nimport Panel from './panel';\r\nimport TotalPoduction from './total-prodiuction';\r\n\r\nconst Dashboard = () => {\r\n    const panels = [];\r\n    const [panelsList, setPanelsList] = useState([]);\r\n    const [totalWattage, setTotalWattage] = useState(0);\r\n    let newWattage = 0;\r\n\r\n    useEffect(() => {\r\n        getPoints();\r\n    }, [])\r\n\r\n    /**\r\n     * Get first 30 points from API\r\n     */\r\n    function getPoints() {\r\n        var request = require(\"request\");\r\n        var options = {\r\n            method: 'GET',\r\n            url: Config.endPoint,\r\n            qs: {\r\n                apikey: Config.apiKey\r\n            },\r\n        };\r\n\r\n        request(options, function (error, response, body) {\r\n            if (error) {\r\n                throw new Error(error.statusText);\r\n            }\r\n\r\n            var result = JSON.parse(body);\r\n            var points = result.slice(0, Config.resultsLimit);\r\n\r\n            generatePanelsList(points);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generate panels grid\r\n     * @param {Array.<String>} points - array of point IDs\r\n     */\r\n    function generatePanelsList(points) {\r\n        for (let i = 0; i < points.length; i++) {\r\n            panels.push(<Panel point={points[i]} className=\"panel\" key={i} totalWattage={totalWattage} onWattageChange={updateTotalWattage}/>)\r\n        }\r\n\r\n        setPanelsList(panels);\r\n    }\r\n\r\n    /**\r\n     * Collect all panels wattage and compine it for total value\r\n     * @param {Number} value - panel wattage\r\n     */\r\n    function updateTotalWattage(value) {\r\n        newWattage = newWattage + value;\r\n\r\n        setTotalWattage(parseFloat(newWattage).toFixed(Config.rounding));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"solar-panels\">\r\n                {panelsList}\r\n            </div>\r\n            <TotalPoduction power={totalWattage} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\nimport Dashboard from './dashboard';\n\nimport './stylesheets/App.scss';\n\nfunction App() {\n  return (\n    <Dashboard />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}